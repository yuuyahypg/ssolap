// Code generated by go-bindata.
// sources:
// assets/css/main.css
// assets/css/main.css.map
// assets/index.html
// assets/js/bundle.js
// server/templates/react.html
// config/.DS_Store
// config/dbConfig.toml
// config/dimension.json
// config/dimensionLevels/age.csv
// config/dimensionLevels/gender.csv
// config/dimensionLevels/memo.txt
// config/dimensionLevels/purpose.csv
// config/dimensionLevels/transport.csv
// config/dimensionLevels/work.csv
// config/dimensionTables/age.csv
// config/dimensionTables/gender.csv
// config/dimensionTables/purpose.csv
// config/dimensionTables/transport.csv
// config/dimensionTables/work.csv
// config/dimensions.json
// config/olapConfig.toml
// config/peopleFlow/config.toml
// config/peopleFlow/dimensionTables/age.csv
// config/peopleFlow/dimensionTables/gender.csv
// config/peopleFlow/dimensionTables/purpose.csv
// config/peopleFlow/dimensionTables/transport.csv
// config/peopleFlow/dimensionTables/work.csv
// config/peopleFlow/dimensions.json
// config/peopleFlow/verticesConfig.csv
// config/senderConfig.toml
// config/topology.toml
// config/verticesConfig.csv
// DO NOT EDIT!

package server

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// assetsCssMainCss reads file data from disk. It returns an error on failure.
func assetsCssMainCss() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/assets/css/main.css"
	name := "assets/css/main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssMainCssMap reads file data from disk. It returns an error on failure.
func assetsCssMainCssMap() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/assets/css/main.css.map"
	name := "assets/css/main.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsIndexHtml reads file data from disk. It returns an error on failure.
func assetsIndexHtml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/assets/index.html"
	name := "assets/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsBundleJs reads file data from disk. It returns an error on failure.
func assetsJsBundleJs() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/assets/js/bundle.js"
	name := "assets/js/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// serverTemplatesReactHtml reads file data from disk. It returns an error on failure.
func serverTemplatesReactHtml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/server/templates/react.html"
	name := "server/templates/react.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDs_store reads file data from disk. It returns an error on failure.
func configDs_store() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/.DS_Store"
	name := "config/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDbconfigToml reads file data from disk. It returns an error on failure.
func configDbconfigToml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dbConfig.toml"
	name := "config/dbConfig.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionJson reads file data from disk. It returns an error on failure.
func configDimensionJson() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimension.json"
	name := "config/dimension.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsAgeCsv reads file data from disk. It returns an error on failure.
func configDimensionlevelsAgeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/age.csv"
	name := "config/dimensionLevels/age.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsGenderCsv reads file data from disk. It returns an error on failure.
func configDimensionlevelsGenderCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/gender.csv"
	name := "config/dimensionLevels/gender.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsMemoTxt reads file data from disk. It returns an error on failure.
func configDimensionlevelsMemoTxt() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/memo.txt"
	name := "config/dimensionLevels/memo.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsPurposeCsv reads file data from disk. It returns an error on failure.
func configDimensionlevelsPurposeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/purpose.csv"
	name := "config/dimensionLevels/purpose.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsTransportCsv reads file data from disk. It returns an error on failure.
func configDimensionlevelsTransportCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/transport.csv"
	name := "config/dimensionLevels/transport.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionlevelsWorkCsv reads file data from disk. It returns an error on failure.
func configDimensionlevelsWorkCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionLevels/work.csv"
	name := "config/dimensionLevels/work.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensiontablesAgeCsv reads file data from disk. It returns an error on failure.
func configDimensiontablesAgeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionTables/age.csv"
	name := "config/dimensionTables/age.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensiontablesGenderCsv reads file data from disk. It returns an error on failure.
func configDimensiontablesGenderCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionTables/gender.csv"
	name := "config/dimensionTables/gender.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensiontablesPurposeCsv reads file data from disk. It returns an error on failure.
func configDimensiontablesPurposeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionTables/purpose.csv"
	name := "config/dimensionTables/purpose.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensiontablesTransportCsv reads file data from disk. It returns an error on failure.
func configDimensiontablesTransportCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionTables/transport.csv"
	name := "config/dimensionTables/transport.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensiontablesWorkCsv reads file data from disk. It returns an error on failure.
func configDimensiontablesWorkCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensionTables/work.csv"
	name := "config/dimensionTables/work.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configDimensionsJson reads file data from disk. It returns an error on failure.
func configDimensionsJson() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/dimensions.json"
	name := "config/dimensions.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configOlapconfigToml reads file data from disk. It returns an error on failure.
func configOlapconfigToml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/olapConfig.toml"
	name := "config/olapConfig.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowConfigToml reads file data from disk. It returns an error on failure.
func configPeopleflowConfigToml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/config.toml"
	name := "config/peopleFlow/config.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensiontablesAgeCsv reads file data from disk. It returns an error on failure.
func configPeopleflowDimensiontablesAgeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensionTables/age.csv"
	name := "config/peopleFlow/dimensionTables/age.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensiontablesGenderCsv reads file data from disk. It returns an error on failure.
func configPeopleflowDimensiontablesGenderCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensionTables/gender.csv"
	name := "config/peopleFlow/dimensionTables/gender.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensiontablesPurposeCsv reads file data from disk. It returns an error on failure.
func configPeopleflowDimensiontablesPurposeCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensionTables/purpose.csv"
	name := "config/peopleFlow/dimensionTables/purpose.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensiontablesTransportCsv reads file data from disk. It returns an error on failure.
func configPeopleflowDimensiontablesTransportCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensionTables/transport.csv"
	name := "config/peopleFlow/dimensionTables/transport.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensiontablesWorkCsv reads file data from disk. It returns an error on failure.
func configPeopleflowDimensiontablesWorkCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensionTables/work.csv"
	name := "config/peopleFlow/dimensionTables/work.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowDimensionsJson reads file data from disk. It returns an error on failure.
func configPeopleflowDimensionsJson() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/dimensions.json"
	name := "config/peopleFlow/dimensions.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configPeopleflowVerticesconfigCsv reads file data from disk. It returns an error on failure.
func configPeopleflowVerticesconfigCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/peopleFlow/verticesConfig.csv"
	name := "config/peopleFlow/verticesConfig.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configSenderconfigToml reads file data from disk. It returns an error on failure.
func configSenderconfigToml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/senderConfig.toml"
	name := "config/senderConfig.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configTopologyToml reads file data from disk. It returns an error on failure.
func configTopologyToml() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/topology.toml"
	name := "config/topology.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configVerticesconfigCsv reads file data from disk. It returns an error on failure.
func configVerticesconfigCsv() (*asset, error) {
	path := "/Users/yuuya/go/src/github.com/yuuyahypg/ssolap/config/verticesConfig.csv"
	name := "config/verticesConfig.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/main.css": assetsCssMainCss,
	"assets/css/main.css.map": assetsCssMainCssMap,
	"assets/index.html": assetsIndexHtml,
	"assets/js/bundle.js": assetsJsBundleJs,
	"server/templates/react.html": serverTemplatesReactHtml,
	"config/.DS_Store": configDs_store,
	"config/dbConfig.toml": configDbconfigToml,
	"config/dimension.json": configDimensionJson,
	"config/dimensionLevels/age.csv": configDimensionlevelsAgeCsv,
	"config/dimensionLevels/gender.csv": configDimensionlevelsGenderCsv,
	"config/dimensionLevels/memo.txt": configDimensionlevelsMemoTxt,
	"config/dimensionLevels/purpose.csv": configDimensionlevelsPurposeCsv,
	"config/dimensionLevels/transport.csv": configDimensionlevelsTransportCsv,
	"config/dimensionLevels/work.csv": configDimensionlevelsWorkCsv,
	"config/dimensionTables/age.csv": configDimensiontablesAgeCsv,
	"config/dimensionTables/gender.csv": configDimensiontablesGenderCsv,
	"config/dimensionTables/purpose.csv": configDimensiontablesPurposeCsv,
	"config/dimensionTables/transport.csv": configDimensiontablesTransportCsv,
	"config/dimensionTables/work.csv": configDimensiontablesWorkCsv,
	"config/dimensions.json": configDimensionsJson,
	"config/olapConfig.toml": configOlapconfigToml,
	"config/peopleFlow/config.toml": configPeopleflowConfigToml,
	"config/peopleFlow/dimensionTables/age.csv": configPeopleflowDimensiontablesAgeCsv,
	"config/peopleFlow/dimensionTables/gender.csv": configPeopleflowDimensiontablesGenderCsv,
	"config/peopleFlow/dimensionTables/purpose.csv": configPeopleflowDimensiontablesPurposeCsv,
	"config/peopleFlow/dimensionTables/transport.csv": configPeopleflowDimensiontablesTransportCsv,
	"config/peopleFlow/dimensionTables/work.csv": configPeopleflowDimensiontablesWorkCsv,
	"config/peopleFlow/dimensions.json": configPeopleflowDimensionsJson,
	"config/peopleFlow/verticesConfig.csv": configPeopleflowVerticesconfigCsv,
	"config/senderConfig.toml": configSenderconfigToml,
	"config/topology.toml": configTopologyToml,
	"config/verticesConfig.csv": configVerticesconfigCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"main.css": &bintree{assetsCssMainCss, map[string]*bintree{}},
			"main.css.map": &bintree{assetsCssMainCssMap, map[string]*bintree{}},
		}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"bundle.js": &bintree{assetsJsBundleJs, map[string]*bintree{}},
		}},
	}},
	"config": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{configDs_store, map[string]*bintree{}},
		"dbConfig.toml": &bintree{configDbconfigToml, map[string]*bintree{}},
		"dimension.json": &bintree{configDimensionJson, map[string]*bintree{}},
		"dimensionLevels": &bintree{nil, map[string]*bintree{
			"age.csv": &bintree{configDimensionlevelsAgeCsv, map[string]*bintree{}},
			"gender.csv": &bintree{configDimensionlevelsGenderCsv, map[string]*bintree{}},
			"memo.txt": &bintree{configDimensionlevelsMemoTxt, map[string]*bintree{}},
			"purpose.csv": &bintree{configDimensionlevelsPurposeCsv, map[string]*bintree{}},
			"transport.csv": &bintree{configDimensionlevelsTransportCsv, map[string]*bintree{}},
			"work.csv": &bintree{configDimensionlevelsWorkCsv, map[string]*bintree{}},
		}},
		"dimensionTables": &bintree{nil, map[string]*bintree{
			"age.csv": &bintree{configDimensiontablesAgeCsv, map[string]*bintree{}},
			"gender.csv": &bintree{configDimensiontablesGenderCsv, map[string]*bintree{}},
			"purpose.csv": &bintree{configDimensiontablesPurposeCsv, map[string]*bintree{}},
			"transport.csv": &bintree{configDimensiontablesTransportCsv, map[string]*bintree{}},
			"work.csv": &bintree{configDimensiontablesWorkCsv, map[string]*bintree{}},
		}},
		"dimensions.json": &bintree{configDimensionsJson, map[string]*bintree{}},
		"olapConfig.toml": &bintree{configOlapconfigToml, map[string]*bintree{}},
		"peopleFlow": &bintree{nil, map[string]*bintree{
			"config.toml": &bintree{configPeopleflowConfigToml, map[string]*bintree{}},
			"dimensionTables": &bintree{nil, map[string]*bintree{
				"age.csv": &bintree{configPeopleflowDimensiontablesAgeCsv, map[string]*bintree{}},
				"gender.csv": &bintree{configPeopleflowDimensiontablesGenderCsv, map[string]*bintree{}},
				"purpose.csv": &bintree{configPeopleflowDimensiontablesPurposeCsv, map[string]*bintree{}},
				"transport.csv": &bintree{configPeopleflowDimensiontablesTransportCsv, map[string]*bintree{}},
				"work.csv": &bintree{configPeopleflowDimensiontablesWorkCsv, map[string]*bintree{}},
			}},
			"dimensions.json": &bintree{configPeopleflowDimensionsJson, map[string]*bintree{}},
			"verticesConfig.csv": &bintree{configPeopleflowVerticesconfigCsv, map[string]*bintree{}},
		}},
		"senderConfig.toml": &bintree{configSenderconfigToml, map[string]*bintree{}},
		"topology.toml": &bintree{configTopologyToml, map[string]*bintree{}},
		"verticesConfig.csv": &bintree{configVerticesconfigCsv, map[string]*bintree{}},
	}},
	"server": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"react.html": &bintree{serverTemplatesReactHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

